<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/07/09/ai-shi-shai/"/>
      <url>/2024/07/09/ai-shi-shai/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-埃氏筛data-2024-07-10-10-00-00"><a href="#title-埃氏筛data-2024-07-10-10-00-00" class="headerlink" title="title:埃氏筛data:2024-07-10 10:00:00  "></a>title:埃氏筛<br>data:2024-07-10 10:00:00  </h2><p>埃拉托色尼筛法（Sieve of Eratosthenes）是古希腊数学家埃拉托色尼提出的一种高效算法，用于寻找小于等于某个给定数 ( n ) 的所有质数。其主要思想是通过标记合数的方法来筛选出质数。埃氏筛的时间复杂度为 ( O(n \log \log n) )，在处理大规模数据时非常高效。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool isprime[1000000];//默认是0,我们认为当是0的时候这个数是素数  </span><br><span class="line">int prime[1000000];  </span><br><span class="line">int cnt;//判断有多少个素数</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    int a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    for(int i = 2;i &lt;= a;i ++)</span><br><span class="line">    {</span><br><span class="line">        if(!isprime[i])</span><br><span class="line">            {</span><br><span class="line">                prime[++cnt] = i;</span><br><span class="line">                for(int j = 2;i *j &lt;= a;j ++)</span><br><span class="line">                {</span><br><span class="line">                    isprime[j] = 1;</span><br><span class="line">                } </span><br><span class="line">            }</span><br><span class="line">     }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后我们得到的prime数组中存放着素数是什么，cnt表示素数有多少个</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模运算 快速幂</title>
      <link href="/2024/07/08/mo-yun-suan-kuai-su-mi/"/>
      <url>/2024/07/08/mo-yun-suan-kuai-su-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h1><p>模运算运算规则</p><p>$$<br>(a + b) \mod c = (a \mod c+b \mod c) \mod c<br>$$<br>$$<br>(a - b) \mod c = (a \mod c+b \mod c) \mod c<br>$$<br>$$<br>(a \cdot b)\mod c=((a\mod c)\cdot(b\mod c)) \mod c<br>$$<br>对于除法不存在这样的公式</p><p>乘法取模<br>对于这个算法 本人其实也并不是很吃透了，但是我这样写下来的话只是简单的记录一下我的想法<br>首先这是一个乘法取模 即<br>$$<br>(a \cdot b)\mod c=((a\mod c)\cdot(b\mod c)) \mod c<br>$$<br>然后我们就是先对a,b单独取模，但是得到后的a,b，我们仍然无法确定它们相乘是否会越界，<br>所以我们对a<em>b进行一下变形<br>那么a * b = a * 2 * b /2<br>如果展开的话 那么(a * 2 * 2 * 2 … )</em>(b/2/2/2…)<br>但是当进行除法的时候当b为奇数的话 那么就相当于 （a * 2)*(b/2 + 1) = (a * 2)(b/2) + (a * 2),多了一个<br>a * 2,所以我们多一个判断奇</p><p>我自己认为它的整体的想法就是把 a*b进行转化 每次其实都把范围给锁定再一定范围内，以至于不会超出界限</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long LL;</span><br><span class="line"></span><br><span class="line">LL mul(LL a, LL b,LL c)</span><br><span class="line">{</span><br><span class="line">a = a % c;</span><br><span class="line">b = b % c;</span><br><span class="line">ll res = 0;</span><br><span class="line">while(b &gt; 0)</span><br><span class="line">{</span><br><span class="line">    if(b &amp; 1) res = (res + a)%c;</span><br><span class="line">    a = (a + a) % c;</span><br><span class="line">    b &gt;&gt;= 1;</span><br><span class="line">}</span><br><span class="line">return res;</span><br><span class="line">}</span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    LL a,b,c;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    cout &lt;&lt; ((a % c) *(b % c)) % c &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; mul(a,b,c) &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><ol><li>幂次与二进制的关系<br> 任何幂都可以转化为二进制表示</li><li>幂次用二进制分解<br> 在程序中我们只需判断那个位数是1还是0</li></ol><p>根据分析我们其实可以发现 所有的幂都是倍乘关系 那么可以通过递推关系来表示</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int fastPow(int a,int n)</span><br><span class="line">{</span><br><span class="line">    int ans = 1;</span><br><span class="line">    while(n)</span><br><span class="line">    {</span><br><span class="line">        if(n &amp; 1) ans *= a;</span><br><span class="line">        a * = a;</span><br><span class="line">        n &gt;&gt; 1;</span><br><span class="line">    }</span><br><span class="line">    return ans;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>幂运算</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">typedef long long ll;</span><br><span class="line">ll fastPow(ll a,ll b,ll mod)</span><br><span class="line">{</span><br><span class="line"> ll ans = 1;</span><br><span class="line"> a % = mod;</span><br><span class="line"> while(b)</span><br><span class="line"> {</span><br><span class="line"> if(b &amp; 1) ans = (ans * a)%mod;</span><br><span class="line"> a = (a * a)%mod;</span><br><span class="line"> b &gt;&gt; 1;</span><br><span class="line">  }</span><br><span class="line">  return ans;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>离散数学 图和特殊图</title>
      <link href="/2024/07/02/chi-san-shu-xue-tu-he-te-shu-tu/"/>
      <url>/2024/07/02/chi-san-shu-xue-tu-he-te-shu-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h2><ul><li>无向边</li><li>有向边</li><li>邻接点</li><li>邻接边</li><li>环</li><li>孤立节点</li><li>零图</li><li>平凡图</li><li>（n,m）图</li><li>子图</li><li>无向完全图</li><li>有向完全图</li><li>补图</li><li>度数</li><li>出度和入度</li><li>悬挂节点</li><li>悬挂边</li><li>奇度数节点</li><li>偶度数节点</li><li>度数序列</li><li>同构</li></ul><h2 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h2><ul><li>图的集合表示</li><li>图的图形表示</li><li>邻接矩阵</li></ul><h2 id="图的操作"><a href="#图的操作" class="headerlink" title="图的操作"></a>图的操作</h2><ul><li>删除边</li><li>删除节点</li><li>收缩边</li><li>加新边</li></ul><h2 id="图的分类"><a href="#图的分类" class="headerlink" title="图的分类"></a>图的分类</h2><ul><li>无向图</li><li>有向图</li><li>混合图</li><li>平行边</li><li>多重图</li><li>线图</li><li>简单图</li><li>赋权图</li></ul><h2 id="通路与回路"><a href="#通路与回路" class="headerlink" title="通路与回路"></a>通路与回路</h2><ul><li>通路</li><li>回路</li><li>基本通路</li><li>简单通路</li></ul><h2 id="图的连通性"><a href="#图的连通性" class="headerlink" title="图的连通性"></a>图的连通性</h2><ul><li>可达</li><li>短程线</li><li>距离</li><li>可达性矩阵</li><li>最短通路</li><li>连通图</li><li>连通分支</li><li>有向联通</li><li>强连通分支</li><li>弱连通分支</li><li>单向连通分支</li><li>Djikstra算法</li><li>floyd算法</li></ul><h1 id="特殊图"><a href="#特殊图" class="headerlink" title="特殊图"></a>特殊图</h1><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><ul><li>树</li><li>森林</li><li>生成树</li><li>最小生成树</li><li>有向树</li><li>根树</li><li>家族关系</li><li>有序树</li><li>k元树</li><li>前缀</li><li>前缀码</li><li>最优树</li><li>求连通图生成树的破圈法</li><li>求连通图生成树的避圈法</li><li>求连通图生成树的广度优先搜索法</li><li>Kruskal算法</li><li>prim算法</li><li>二元树的先根次序遍历法</li><li>二元树的中根次序遍历法</li><li>二元树的后根次序遍历法</li><li>根树转化为二元树算法</li><li>森林转化为二元树算法</li><li>哈夫曼算法</li></ul><h2 id="欧拉图"><a href="#欧拉图" class="headerlink" title="欧拉图"></a>欧拉图</h2><ul><li>欧拉图</li></ul><h2 id="偶图"><a href="#偶图" class="headerlink" title="偶图"></a>偶图</h2><ul><li>偶图</li><li>完全偶图</li><li>匹配</li></ul><h2 id="平面图"><a href="#平面图" class="headerlink" title="平面图"></a>平面图</h2><ul><li>交叉点</li><li>平面图</li><li>平面表示</li><li>观察法</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>离散数学 二元关系 特殊关系</title>
      <link href="/2024/07/01/chi-san-shu-xue-er-yuan-guan-xi-te-shu-guan-xi/"/>
      <url>/2024/07/01/chi-san-shu-xue-er-yuan-guan-xi-te-shu-guan-xi/</url>
      
        <content type="html"><![CDATA[<p>因为作者最近要考试离散数学了，所以想趁这个机会自己一遍复习离散数学一遍做一份知识点的清单来供给大家用。由于作者只是想做一份关于主要概念的列表，但是又并不是包含具体的概念，只是列出相关名词，然后大家自己通过自己的知识来回顾知识，作者的本意是为了自己通关这些来具体回忆，作者只是为了希望知道这些词都代表着什么含义，同时也给大家提供了一些方便，希望通过我这个列表，大家可以快速回顾主要的一些概念。</p><p>由于作者比较水，所以一些定理就不再写了…</p><h1 id="二元关系"><a href="#二元关系" class="headerlink" title="二元关系"></a>二元关系</h1><h2 id="二元关系相关概念"><a href="#二元关系相关概念" class="headerlink" title="二元关系相关概念"></a>二元关系相关概念</h2><ul><li><input disabled="" type="checkbox"> 序偶</li><li><input disabled="" type="checkbox"> 序偶相等</li><li><input disabled="" type="checkbox"> n重有序组</li><li><input disabled="" type="checkbox"> A与B的笛卡尔积</li><li><input disabled="" type="checkbox"> A1,A2,A3…An的笛卡尔积</li><li><input disabled="" type="checkbox"> 关系</li><li><input disabled="" type="checkbox"> 空关系</li><li><input disabled="" type="checkbox"> 全关系</li><li><input disabled="" type="checkbox"> 前域和后域</li><li><input disabled="" type="checkbox"> 定义域，值域和域</li><li><input disabled="" type="checkbox"> 关系矩阵</li><li><input disabled="" type="checkbox"> 布尔矩阵</li><li><input disabled="" type="checkbox"> 布尔交</li><li><input disabled="" type="checkbox"> 布尔并</li><li><input disabled="" type="checkbox"> 布尔积</li><li><input disabled="" type="checkbox"> 三个定理</li></ul><h2 id="二元关系的运算"><a href="#二元关系的运算" class="headerlink" title="二元关系的运算"></a>二元关系的运算</h2><ul><li><input disabled="" type="checkbox"> 关系的基本运算</li><li><input disabled="" type="checkbox"> 复合运算</li><li><input disabled="" type="checkbox"> 逆运算</li><li><input disabled="" type="checkbox"> 关系的幂</li><li><input disabled="" type="checkbox"> 自反闭包（对称闭包和传递闭包）</li><li><input disabled="" type="checkbox"> 鸽笼原理</li></ul><h2 id="关系的性质"><a href="#关系的性质" class="headerlink" title="关系的性质"></a>关系的性质</h2><ul><li><input disabled="" type="checkbox"> 自反性</li><li><input disabled="" type="checkbox"> 反自反性</li><li><input disabled="" type="checkbox"> 对称性</li><li><input disabled="" type="checkbox"> 反对称性</li><li><input disabled="" type="checkbox"> 传递性</li></ul><h1 id="特殊关系"><a href="#特殊关系" class="headerlink" title="特殊关系"></a>特殊关系</h1><h2 id="相容关系"><a href="#相容关系" class="headerlink" title="相容关系"></a>相容关系</h2><ul><li><input disabled="" type="checkbox"> 相容关系</li><li><input disabled="" type="checkbox"> 集合覆盖</li></ul><h2 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h2><ul><li><input disabled="" type="checkbox"> 等价关系</li><li><input disabled="" type="checkbox"> 同余关系</li><li><input disabled="" type="checkbox"> 划分</li><li><input disabled="" type="checkbox"> 等价类</li><li><input disabled="" type="checkbox"> 商集</li></ul><h2 id="次序关系"><a href="#次序关系" class="headerlink" title="次序关系"></a>次序关系</h2><ul><li><input disabled="" type="checkbox"> 逆序关系</li><li><input disabled="" type="checkbox"> 偏序关系</li><li><input disabled="" type="checkbox"> 哈斯图</li><li><input disabled="" type="checkbox"> 最大元</li><li><input disabled="" type="checkbox"> 最小元</li><li><input disabled="" type="checkbox"> 极大元</li><li><input disabled="" type="checkbox"> 极小元</li><li><input disabled="" type="checkbox"> 上界</li><li><input disabled="" type="checkbox"> 下界</li><li><input disabled="" type="checkbox"> 最小上界</li><li><input disabled="" type="checkbox"> 最小下界</li><li><input disabled="" type="checkbox"> 全序关系</li><li><input disabled="" type="checkbox"> 良序关系</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/06/23/jin-wen-ting/"/>
      <url>/2024/06/23/jin-wen-ting/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/%E9%87%91.jpg"></p><h1 id="绿炮火"><a href="#绿炮火" class="headerlink" title="绿炮火"></a>绿炮火</h1><h2 id="你好，我是绿炮火，陈年微风的室友"><a href="#你好，我是绿炮火，陈年微风的室友" class="headerlink" title="你好，我是绿炮火，陈年微风的室友"></a>你好，我是绿炮火，陈年微风的室友</h2><h3 id="我喜欢金玟庭，画画，编程，学习，欢迎大家和我交朋友"><a href="#我喜欢金玟庭，画画，编程，学习，欢迎大家和我交朋友" class="headerlink" title="我喜欢金玟庭，画画，编程，学习，欢迎大家和我交朋友"></a>我喜欢金玟庭，画画，编程，学习，欢迎大家和我交朋友</h3><p><img src="/../images/%E7%BB%BF%E7%82%AE%E7%81%AB.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/06/22/lu-pao-huo/"/>
      <url>/2024/06/22/lu-pao-huo/</url>
      
        <content type="html"><![CDATA[<p>#绿炮火<br>绿炮火是一个非常非常可爱的人，他经常被他的室友夸</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/18/hello-world/"/>
      <url>/2024/06/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
